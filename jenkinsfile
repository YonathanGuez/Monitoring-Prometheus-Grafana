
def repoName

pipeline {
    agent any

    stages {
	    stage('env Repository') {
            steps {
                script {
                    repoName = env.GIT_URL.tokenize("/")[-1].replace(".git", "")
                    echo "Cloned repository name: ${repoName}"
                }
            }
        }

		stage('Check Docker up ') {
            steps {
				script {
					if (isUnix()) {
						sh "echo skip"
					}else{
						// Check if Docker is running
						def dockerStatus = bat(script: 'docker info', returnStatus: true)
						
						if (dockerStatus != 0) {
							 error("Docker is not running. try to start docker in your laptop...")
						} else {
						    try {
								echo "Docker is already running."
								bat 'docker network rm monitoring'
								bat 'docker volume rm -f prometheus-data'
								bat 'docker volume rm -f grafana-storage'
							} catch (Exception e) {
								// Handle the exception
								echo "Failed to remove the Docker network: ${e.message}"
							}
							
						}
					}
				}
			}
        }
		stage('Create Network+Volume') {
            steps {
                script {
                    // Create Docker network
                    if (isUnix()) {
                        sh 'docker network create monitoring'
						sh 'docker volume create prometheus-data'
						sh 'docker volume create grafana-storage'
                    } else {
                        bat 'docker network create monitoring'
						bat 'docker volume create prometheus-data'
						bat 'docker volume create grafana-storage'
                    }
                }
            }
        }
		
		stage('Create prometheus.yml') {
            steps {
				script {
					dir("${repoName}") {
						if (isUnix()) {
							sh './authomation_config_prometheus_yml.sh'
						}else {
							bat 'powershell.exe -File .\\authomation_config_prometheus_yml.ps1'
						}
					}
				}
            }
        }

        stage('Docker Run Prometheus and Grafana') {
			steps {
				script {
					dir("${repoName}") {
						// Docker run based on OS
						if (isUnix()) {
							docker.image('prom/prometheus').withRun('-p 9090:9090 --name prometheus --network monitoring -v prometheus-IP.yml:/etc/prometheus/prometheus.yml -v prometheus-data:/prometheus')
							docker.image('grafana/grafana').withRun('-p 3000:3000 --name grafana  --network monitoring --volume grafana-storage:/var/lib/grafana')
						} else {
							// Get the current working directory
							def currentDir = pwd()
							echo "Current working directory: ${currentDir}"
							// Replace backslashes with double backslashes
							currentDir = currentDir.replace("\\", "\\\\")
							bat 'docker run -p 9090:9090 --name prometheus --network monitoring -v $currentDir\\prometheus-IP.yml:/etc/prometheus/prometheus.yml -v prometheus-data:/prometheus prom/prometheus'
							bat 'docker run -d -p 3000:3000 --network monitoring --name=grafana --volume grafana-storage:/var/lib/grafana grafana/grafana'
						}
						
						// Wait for containers to start (depends on your setup)
						if (isUnix()) {
							sh 'sleep 10'
						} else {
							bat 'timeout /nobreak /t 10'
						}
					}
				}
			}
		}

        stage('Run Script to Build Dashboard') {
            steps {
                script {
                    if (isUnix()) {
                        sh './create-dashboard-api.sh dashboard.json'
                    } else {
                        bat '.\\create-dashboard-api.ps1 dashboard.json'
                    }
                }
            }
        }

        stage('Check Dashboard URL') {
            steps {
                script {
                    // Replace 'admin:admin' with your Grafana credentials
                    def response
                    if (isUnix()) {
                        response = sh(script: 'curl -s -o /dev/null -w "%{http_code}" http://admin:admin@localhost:3000', returnStatus: true)
                    } else {
                        response = bat(script: 'curl -s -o NUL -w "%%{http_code}" http://admin:admin@localhost:3000', returnStatus: true)
                    }
                    if (response == 200) {
                        echo 'Dashboard URL is accessible.'
                    } else {
                        error 'Failed to access Dashboard URL.'
                    }
                }
            }
        }

        stage('Clean and Stop Containers') {
            steps {
                script {
                    // Docker stop and remove based on OS
                    if (isUnix()) {
                        docker.image('prom/prometheus').stop()
                        docker.image('prom/prometheus').remove()
                        docker.image('grafana/grafana').stop()
                        docker.image('grafana/grafana').remove()
                    } else {
                        bat 'docker stop $(docker ps -q)'
                        bat 'docker rm $(docker ps -a -q)'
                    }
                }
            }
        }
		stage('Clean') {
            steps {
                script {
                    // Clean workspace
                    if (isUnix()) {
                        sh 'rm -rf $WORKSPACE/*'
                    } else {
                        bat 'rmdir /S /Q %WORKSPACE%'
                        bat 'mkdir %WORKSPACE%'
                    }
                }
            }
        }
    }

    //post {
      //  always {
            // Clean up any artifacts or resources if needed
       // }
   // }
}
